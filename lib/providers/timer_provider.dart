import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:audioplayers/audioplayers.dart';

enum PomodoroPhase { work, shortBreak, longBreak }

class TimerProvider extends ChangeNotifier {
  // --- CONFIGURACI√ìN DE DURACI√ìN (en minutos) ---
  int _workDurationMinutes = 25;
  int _shortBreakDurationMinutes = 5;
  int _longBreakDurationMinutes = 15; // ‚úÖ ahora editable

  // --- CONFIGURACI√ìN AVANZADA ---
  bool _autoStartBreaks = false;
  bool _autoStartPomodoros = false;
  int _longBreakInterval = 4;
  bool _notificationsEnabled = true;
  bool _soundEnabled = true;

  // --- ESTADO DEL TEMPORIZADOR ---
  int _remainingTimeSeconds = 25 * 60;
  Timer? _timer;
  bool _isRunning = false;
  PomodoroPhase _currentPhase = PomodoroPhase.work;
  int _currentCycle = 1;

  String _userName = "Usuario";
  DateTime _lastUpdatedDate = DateTime.now();

  // --- FRASES MOTIVACIONALES ---
  final List<String> focusPhrases = [
    "Nadie lo va a hacer por vos. O lo hac√©s ahora, o segu√≠s so√±ando con hacerlo alg√∫n d√≠a.",
    "No te distraigas: cada vez que lo hac√©s, eleg√≠s postergar la vida que quer√©s.",
    "Mientras dud√°s, alguien m√°s est√° avanzando.",
    "El tiempo que perd√©s no vuelve. Nunca.",
    "No est√°s cansado. Est√°s evitando crecer.",
    "No busques excusas, busc√° resultados.",
    "Cada Pomodoro que termin√°s es una promesa cumplida con vos mismo. Romperla duele m√°s.",
    "Quer√≠as resultados distintos, pero segu√≠s haciendo lo mismo.",
    "No sos tu potencial, sos lo que hac√©s cada d√≠a.",
    "El sacrificio de hoy es la libertad de ma√±ana.",
    "Tu futuro depende de lo que hagas en los pr√≥ximos 25 minutos, no ma√±ana.",
    "Si no soport√°s el esfuerzo, vas a tener que soportar las consecuencias.",
    "Tus metas no te est√°n esperando, se las est√° llevando otro que s√≠ trabaja.",
    "Cada interrupci√≥n es una forma de rendirte un poco.",
    "No te falta tiempo. Te falta decisi√≥n.",
  ];

  final List<String> breakPhrases = [
    "Respir√°. No est√°s frenando, est√°s recargando.",
    "Tomate este momento para recuperar energ√≠a, no para rendirte.",
    "Descansar tambi√©n es parte del trabajo, si sab√©s volver.",
    "Solt√° un poco, pero no olvides por qu√© empezaste.",
    "Este descanso no es premio ni castigo, es estrategia.",
    "Afloj√° el cuerpo, pero manten√© viva la intenci√≥n.",
    "Un respiro no borra el progreso, lo refuerza.",
    "Tu mente necesita pausa, no abandono.",
    "Us√° este descanso para pensar en lo que viene, no en lo que falta.",
    "Relajate, pero sab√© que el reloj vuelve a correr pronto.",
    "Cuidarte tambi√©n es disciplina.",
    "Este momento es tuyo, aprovechalo para volver m√°s claro.",
    "No se trata de parar, sino de volver mejor.",
    "Un buen descanso sostiene un buen rendimiento.",
    "Respir√° profundo. La constancia tambi√©n se entrena descansando.",
  ];

  String _currentPhrase = "";
  String get currentPhrase => _currentPhrase;

  void _updateMotivationalPhrase() {
    final random = Random();
    if (_currentPhase == PomodoroPhase.work) {
      _currentPhrase = focusPhrases[random.nextInt(focusPhrases.length)];
    } else {
      _currentPhrase = breakPhrases[random.nextInt(breakPhrases.length)];
    }
    notifyListeners();
  }

  // --- Notificaciones y Audio ---
  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();
  final AudioPlayer _audioPlayer = AudioPlayer()..setVolume(1.0);

  // --- GETTERS ---
  int get workDurationMinutes => _workDurationMinutes;
  int get shortBreakDurationMinutes => _shortBreakDurationMinutes;
  int get longBreakDurationMinutes => _longBreakDurationMinutes;
  int get remainingTimeSeconds => _remainingTimeSeconds;
  bool get isRunning => _isRunning;
  PomodoroPhase get currentPhase => _currentPhase;
  int get currentCycle => _currentCycle;
  int get completedCycles => _currentCycle > 1 ? _currentCycle - 1 : 0;
  int get totalTimeStudiedInMinutes => completedCycles * _workDurationMinutes;
  String get userName => _userName;

  bool get autoStartBreaks => _autoStartBreaks;
  bool get autoStartPomodoros => _autoStartPomodoros;
  int get longBreakInterval => _longBreakInterval;
  bool get notificationsEnabled => _notificationsEnabled;
  bool get soundEnabled => _soundEnabled;

  String get formattedTime {
    int minutes = _remainingTimeSeconds ~/ 60;
    int seconds = _remainingTimeSeconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }

  String get formattedTimeStudied {
    int totalMinutes = totalTimeStudiedInMinutes;
    int hours = totalMinutes ~/ 60;
    int minutes = totalMinutes % 60;
    return '${hours}h ${minutes}m';
  }

  // --- SETTERS ---
  void setUserName(String name) {
    _userName = name;
    notifyListeners();
  }

  Future<void> setWorkDuration(int minutes) async {
    _workDurationMinutes = minutes;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('work_duration', minutes);
    if (!_isRunning && _currentPhase == PomodoroPhase.work) {
      _remainingTimeSeconds = minutes * 60;
    }
    notifyListeners();
  }

  Future<void> setShortBreakDuration(int minutes) async {
    _shortBreakDurationMinutes = minutes;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('short_break_duration', minutes);
    if (!_isRunning && _currentPhase == PomodoroPhase.shortBreak) {
      _remainingTimeSeconds = minutes * 60;
    }
    notifyListeners();
  }

  Future<void> setLongBreakDuration(int minutes) async {
    _longBreakDurationMinutes = minutes < 1 ? 1 : minutes;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('long_break_duration', _longBreakDurationMinutes);
    notifyListeners();
  }

  Future<void> setAutoStartBreaks(bool value) async {
    _autoStartBreaks = value;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('auto_start_breaks', value);
    notifyListeners();
  }

  Future<void> setAutoStartPomodoros(bool value) async {
    _autoStartPomodoros = value;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('auto_start_pomodoros', value);
    notifyListeners();
  }

  Future<void> setLongBreakInterval(int value) async {
    _longBreakInterval = value < 1 ? 1 : value;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('long_break_interval', _longBreakInterval);
    notifyListeners();
  }

  Future<void> setNotificationsEnabled(bool value) async {
    _notificationsEnabled = value;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('notifications_enabled', value);
    notifyListeners();
  }

  Future<void> setSoundEnabled(bool value) async {
    _soundEnabled = value;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('sound_enabled', value);
    notifyListeners();
  }

  // --- Cargar configuraci√≥n guardada ---
  Future<void> _loadDurationsFromPrefs() async {
    final prefs = await SharedPreferences.getInstance();
    _workDurationMinutes = prefs.getInt('work_duration') ?? 25;
    _shortBreakDurationMinutes = prefs.getInt('short_break_duration') ?? 5;
    _longBreakDurationMinutes = prefs.getInt('long_break_duration') ?? 15;
    _autoStartBreaks = prefs.getBool('auto_start_breaks') ?? false;
    _autoStartPomodoros = prefs.getBool('auto_start_pomodoros') ?? false;
    _longBreakInterval = prefs.getInt('long_break_interval') ?? 4;
    _notificationsEnabled = prefs.getBool('notifications_enabled') ?? true;
    _soundEnabled = prefs.getBool('sound_enabled') ?? true;

    _remainingTimeSeconds = _workDurationMinutes * 60;
  }

  // --- Inicializaci√≥n de notificaciones ---
  Future<void> _initializeNotifications() async {
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
      requestSoundPermission: true,
      requestBadgePermission: true,
      requestAlertPermission: true,
    );

    const InitializationSettings initializationSettings =
        InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    await flutterLocalNotificationsPlugin.initialize(initializationSettings);

    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.requestNotificationsPermission();

    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'pomodoro_channel',
      'Notificaciones Pomod≈ç',
      description: 'Canal de notificaciones para finales de ciclo de Pomodoro.',
      importance: Importance.high,
    );

    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);
  }

  // --- Mostrar notificaci√≥n + reproducir sonido ---
  Future<void> _showNotificationAndPlaySound(PomodoroPhase phase) async {
    if (_notificationsEnabled) {
      String title;
      String body;

      if (phase == PomodoroPhase.work) {
        title = "¬°Fin del Enfoque! üîî";
        body =
            "T√≥mate un ${_currentCycle % _longBreakInterval == 0 ? 'descanso largo' : 'descanso corto'} y recarga energ√≠as.";
      } else {
        title = "¬°Fin del Descanso! üí™";
        body = "Es hora de volver al enfoque. ¬°Ciclo ${_currentCycle + 1}!";
      }

      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
        'pomodoro_channel',
        'Notificaciones Pomod≈ç',
        importance: Importance.max,
        priority: Priority.high,
        ticker: 'timer-alert',
        playSound: false,
      );

      const DarwinNotificationDetails iOSDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentSound: false,
      );

      const NotificationDetails platformDetails =
          NotificationDetails(android: androidDetails, iOS: iOSDetails);

      await flutterLocalNotificationsPlugin.show(
        0,
        title,
        body,
        platformDetails,
      );
    }

    if (_soundEnabled) {
      try {
        await _audioPlayer.stop();
        await _audioPlayer.play(AssetSource('audio/pomodoro_ring.wav'));
      } catch (e) {
        print('‚ùå Error al reproducir sonido: $e');
      }
    }
  }

  // --- Guardar sesi√≥n en Supabase ---
  Future<void> _savePomodoroSession(int durationMinutes, String type) async {
    final supabase = Supabase.instance.client;
    final user = supabase.auth.currentUser;

    if (user == null) return;

    try {
      await supabase.from('pomodoro_sessions').insert({
        'user_id': user.id,
        'duration_minutes': durationMinutes,
        'type': type,
        'completed_at': DateTime.now().toIso8601String(),
      });

      print("‚úÖ Sesi√≥n guardada en Supabase ($type - $durationMinutes min)");
      await _loadTodayStats();
    } catch (e) {
      print("‚ùå Error al guardar sesi√≥n: $e");
    }
  }

  // --- Cargar estad√≠sticas del d√≠a desde Supabase ---
  Future<void> _loadTodayStats() async {
    final supabase = Supabase.instance.client;
    final user = supabase.auth.currentUser;
    if (user == null) return;

    try {
      final today = DateTime.now();
      final startOfDay = DateTime(today.year, today.month, today.day);

      final data = await supabase
          .from('pomodoro_sessions')
          .select('duration_minutes, completed_at, type')
          .eq('user_id', user.id)
          .eq('type', 'work')
          .gte('completed_at', startOfDay.toIso8601String());

      int totalMinutes = 0;
      int totalSessions = 0;

      for (var row in data) {
        totalMinutes += (row['duration_minutes'] as num?)?.toInt() ?? 0;
        totalSessions++;
      }

      _currentCycle = totalSessions + 1;
      _lastUpdatedDate = today;
      notifyListeners();
    } catch (e) {
      print("‚ùå Error al cargar sesiones del d√≠a: $e");
    }
  }

  // --- L√≥gica del temporizador ---
  void startStopTimer() {
    if (DateTime.now().day != _lastUpdatedDate.day) {
      _currentCycle = 1;
      _lastUpdatedDate = DateTime.now();
      notifyListeners();
    }

    if (_isRunning) {
      _timer?.cancel();
      _isRunning = false;
    } else {
      _isRunning = true;
      _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
        if (_remainingTimeSeconds > 0) {
          _remainingTimeSeconds--;
        } else {
          _showNotificationAndPlaySound(_currentPhase);
          if (_currentPhase == PomodoroPhase.work) {
            _savePomodoroSession(_workDurationMinutes, "work");
          }
          _handleNextPhase(false);
        }
        notifyListeners();
      });
    }
    notifyListeners();
  }

  void skipPhase() {
    _handleNextPhase(false);
  }

  void _handleNextPhase(bool autoStartNext) {
    _isRunning = false;
    _timer?.cancel();

    if (_currentPhase == PomodoroPhase.work) {
      if (_currentCycle % _longBreakInterval == 0) {
        _currentPhase = PomodoroPhase.longBreak;
        _remainingTimeSeconds = _longBreakDurationMinutes * 60;
      } else {
        _currentPhase = PomodoroPhase.shortBreak;
        _remainingTimeSeconds = _shortBreakDurationMinutes * 60;
      }

      _updateMotivationalPhrase(); // ‚úÖ cambia frase al pasar a descanso

      if (_autoStartBreaks) {
        startStopTimer();
        return;
      }
    } else {
      if (_currentPhase == PomodoroPhase.longBreak) {
        _currentCycle = 1;
      } else {
        _currentCycle++;
      }
      _currentPhase = PomodoroPhase.work;
      _remainingTimeSeconds = _workDurationMinutes * 60;

      _updateMotivationalPhrase(); // ‚úÖ cambia frase al pasar a enfoque

      if (_autoStartPomodoros) {
        startStopTimer();
        return;
      }
    }

    notifyListeners();
  }

  void resetTimer() {
    _timer?.cancel();
    _isRunning = false;
    _currentPhase = PomodoroPhase.work;
    _currentCycle = 1;
    _remainingTimeSeconds = _workDurationMinutes * 60;
    _updateMotivationalPhrase(); // ‚úÖ FIX: refresca frase al resetear
    notifyListeners();
  }

  // --- Inicializaci√≥n ---
  TimerProvider() {
    _initializeProvider();
  }

  Future<void> _initializeProvider() async {
    await _loadDurationsFromPrefs();
    await _loadTodayStats();
    await _initializeNotifications();
    _updateMotivationalPhrase(); // ‚úÖ FIX: genera primera frase visible
    notifyListeners();
  }

  void loadTodayStatsIfAvailable() {
    _loadTodayStats();
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }
}
